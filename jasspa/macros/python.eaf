 "" "</FOLD><FOLD-> \ecCControl Flow:\ecA"
ma "#!/usr/bin/env python3\r# -*- coding: ISO-8859-15 -*-\r\"\"\"\pModulename\r\rUsage: {0} ?-h,-?,--help?\r\rArguments:\r\"\"\"\r__author__ = \"first last\"\r__version__ = \"0.1\"\rimport sys, os, re\r\rdef help(argv):\r\Tprint(__doc__.format(argv[1]))\r\rdef usage(argv):\r\Tprint(f\"Usage: {argv[0]} args\")\r\rdef main(argv):\r\Tif (len(argv)) == 1:\r\Tusage(argv)\r\r\Telif \"-h\" in argv or \"--help\" in argv:\r\Thelp(argv)\r\rif __name__ == \"__main__\":\r\Tmain(sys.argv)\r\r\P" "  \CCDma\CCAin"
en  "# -*- coding: ISO-8859-\p -*-\r\P" "  \CCDen\CCAcoding"
enc15  "# -*- coding: ISO-8859-15 -*-\r" "  \CCDenc15\CCA"
enc1252  "# -*- coding: cp1252 -*-\r" "  \CCDenc1252\CCA"
def "def \p():\r\T\"\"\"this is a docstring for a method\"\"\"\rpass\r\P" "  \CCDdef\CCA"
deft "def \p(n: 'type') -> 'type':\r\T\"\"\"this is a docstring for a method\"\"\"\rpass\r\P" "  \CCDdeft\CCA"
cl "class \p:\r    \"\"\"Docstring for the class\"\"\"\rdef __init__(self):\r\Tpass\r\P" "  \CCDcl\CCAass"
cli "class \p (BaseClass):\r    \"Docstring\"\rdef __init__(self,arg):\r    super().__init__(arg)\r\P" "  \CCDcl\CCAass\CCDi\CCA"
defm "def \p (self):\r\T"\"\"\"this is a docstring for a method\"\"\"\rpass\r\P" "  \CCDdefm\CCA public def"
defp "def __\p__():\P" "  \CCDdefp\CCA private"
doc "\"\"\"this is a docstring for a method\"\"\" "  \CCDdoc\CCA(string)"
if "if \p:\P" "  \CCDif\CCA"
ei "elif \p:\P" "  \CCDe\CCAl\CCDi\CCAf"
el "else:\r\T" "  \CCDel\CCAse"
wh "while (\p):\r\P" "  \CCDwh\CCAile"
fo "for \p in range(10):\P" "  \CCDfo\CCAr"
l2d "dct=dict({})\rfor i in range(1,len(\plst),2):\r\Tkey = lst[i]\rval = lst[i+1]\rdct[key]=val\r\P" "  \CCDl2d\CCA"
iff "if not os.path.isfile(\p):\P" "  \CCDiff\CCAile"
or "file = open(\p,'r')\rfor line in file:\r    print(line)\rfile.close()\r\P" "  \CCDo\CCApen\CCDr\CCA"
ow "out  = open(\p,'w')\rout.write('')\rout.close()\r\P" "  \CCDo\CCApen\CCDw\CCA"
tr "try:\r    # try code\r    \p\rexcept ...Error:\r     # except code\P" "  \CCDtr\CCAy except"
tf "try:\r    # try code\r    \p\rfinally:\r     # finally code\P" "  \CCDt\CCAry \CCDf\CCAinally"
 "" ""
 "" "</FOLD><FOLD+> \ecCGoogle Docstrings:\ecA "
cdoc "\"\"\"\pclass description\r\r    more extensive description\r\r    Attributes:\r    attr1 (type): description of public attribute 'attr1'\r\r    \"\"\"" "  cdoc"
cmdoc "\"\"\"\r\pmethod description\r\r        Args:\r    name (type): description\r\r        Returns:\r   Type - description\r\r        \"\"\"\P" "  cmdoc"
ddoc "\"\"\"\r\pdef description\r\r    Args:\r    name (type): description\r\r    Returns:\r   Type - description\r\r    \"\"\"\P" "  ddoc"
mdoc "\"\"\"\pmodule title\r\rmodule description\r\rExample:\r\r        $ python3 file.py --help\r\rAttributes:\r    attr1 (type): description of public module variable\r\rTodo:\r    Describe todos\r\r\"\"\"\P" "  mdoc"
 "" ""
 "" "</FOLD><FOLD+> \ecCData:\ecA "
csvr "csvin = open(\p,'r')\rreader=csv.reader(csvin,delimiter='\t',quotechar='\"')\rfor row in reader:\r\Tprint(', '.join(row))\r\P" "  csvr"
sqlr "conn=sqlite3.connect(\p);\r# conn.row_factory = sqlite3.Row # for dict access\rcurs=conn.cursor()\r\P" "  sqlr"
sqls "curs.execute(\"\p\")\rrows=curs.fetchall()\rfor row in rows:\r    print(row)\r\P" "  sqls"
 "" ""
 "" "</FOLD><FOLD+> \ecCArgparse:\ecA "
argpn "parser = argparse.ArgumentParser(prog = '\p',\r\Tdescription=__doc__,\rformatter_class=argparse.RawTextHelpFormatter)\rargs=parser.parse_args(sys.argv[1:])\rprint(args)\r\P" "  parser"
argpm "parser.add_argument('\pmandatory',help='a mandatory argument')\P" "  argmand"
argpo "parser.add_argument('--\pinteger','-i',help='an optional argument')\P"  "  argopt"
argpf "parser.add_argument('--flag','-f',help=\"an flag\",action=\"store_true\")"  "  argflag"
 "" ""
 "" "</FOLD><FOLD+> \ecCTkinter:\ecA "
tkimport "import tkinter as tk\rimport tkinter.ttk as ttk\r"  "  tkimport"
tkfdimport "from tkinter import filedialog" "  tkfdimport"
tkmbimport "from tkinter import messagebox" "  tkmbimport"
tkroot "root = tk.Tk()\rroot.title(\"Appname\")\r\pttk.Button(root,text=\"Exit\",command=sys.exit).pack()\rroot.mainloop()\r\P" "  tkroot"
tkmenui  "mnu.insert_command(index=0,label='\p ...', command=self.cmd, underline=0)", "  tkmenui"
tktext "txt = tk.Text(\pparent)\ryview=ttk.Scrollbar(parent,command=txt.yview)\rtxt.configure(yscrollcommand=yview.set)\r\P" "  tktext"
tkfopen  "filename=filedialog.askopenfilename(\r    title='Select filename',\rfiletypes=(\r('Text files', '*.txt *.text'),\r('All Files', '*.*')),\rinitialdir=os.path.dirname(self.lastfile))\r" "  tkfopen"
tkmboxyn "answer = tk.messagebox.askquestion('title', 'Are sure ...?', icon='warning')" "  tkmboxyn"
tkmboxync "answer = tk.messagebox.askyesnocancel('\ptitle', 'Are sure ...?', icon='warning')\rif answer is None:\r    return\rif (answer):\r    print('yes')\r\P" "  tkmboxync"
tkmboxin "tk.messagebox.showinfo('\p', 'Text ...!'), icon='warning')\P" "  tkmboxin"
test "def test():\r\Tehello\r\rdef (test2):\r\Tpass\r\r" " test"
 "" "</FOLD>"
