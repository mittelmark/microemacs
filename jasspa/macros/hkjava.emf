; -!- emf -!-
; This is part of the JASSPA MicroEmacs macro files
; Copyright (C) 1999-2009 JASSPA (www.jasspa.com)
; See the file me.emf for copying and conditions.
;
; Synopsis:    Java mode hook
; Authors:     Jon Green
;
; Contributions and Acknowledgements:
;
; October 2006 - Bryan Schofield
; Major mode hilighting and indentation suggestions.
;
define-macro fhook-java
    set-variable $buffer-mask "luh1"
    @# buffer-init "java"
    !if &equ $buffer-indent .indent.java
        set-variable $buffer-indent &add $buffer-indent 1
    !endif
    buffer-init-hooks
!emacro

; buffer-init variables
set-variable .fhook-java.setup &reg "/history/fhook/java" "bdfghnopx"
set-variable .fhook-java.setup-mask "abdefghikmnoptuxlrv"
set-variable .fhook-java.tags "javatags"
set-variable .fhook-java.comment "|/*| */|*| * | * |fr|"

; Javadoc comment - /** ... detailed text ...
;                    *  ... detailed text ... */
set-variable .fhook-java.comment-1 "|/**| */|*| * | * |f|"

; Set up the collapse of functions
set-variable .fhook-java.collapse-open   "^[a-zA-Z].*{$"
set-variable .fhook-java.collapse-close  "^}"
set-variable .fhook-java.collapse-mclose "1"
set-variable .fhook-java.collapse-mnext  "-1"
; Set up menu items for Java mode.
set-variable .fhook-java.setup-flags   "|r|v|l|"
set-variable .fhook-java.setup-labels  "|Brace highlighting|Enable bracket alignment|Alternative indent mode|"
; setup item-list
set-variable .fhook-java.item-list-s1 "^[ \t]*\\([a-zA-Z0-9_ \t]*[ \t]\\)?\\([a-zA-Z0-9_]+\\)[ \t]*([a-zA-Z0-9_,\t]*)[ \t]*{"
set-variable .fhook-java.item-list-r1 "Func \ecB\\2\ecA"
set-variable .fhook-java.item-list-s2 "^[ \t]*\\(public[ \t]+\\|private[ \t]+\\)?class[ \t]\\(\\w+\\)"
set-variable .fhook-java.item-list-r2 "Clss \ecB\\2\ecA"

!if &not &exist .hilight.java
    set-variable .hilight.java &pinc .hilight.next 2
!endif
!if &and &sin "h" .fhook-java.setup &band .hilight.flags 0x02
    ; High-light Java Mode
    0 hilight .hilight.java 2 50            $global-scheme
    hilight .hilight.java 2  "//"           .scheme.comment
    hilight .hilight.java 20 "/\\*" "*/" "" .scheme.comment
    hilight .hilight.java 4 "\"" "\"" "\\"  .scheme.string
    hilight .hilight.java 0 "'.'"           .scheme.quote
    hilight .hilight.java 0 "'\\\\.'"       .scheme.quote
    hilight .hilight.java 0 "'\\\\'"        .scheme.error
    hilight .hilight.java 0 "'\\\\''"       .scheme.quote
    ; Hilight TODO in a comment - Examples
    ; i.e. /* TODO I need to do this */
    hilight .hilight.java   20 "/\\*\\s+[Tt][Oo][Dd][Oo]" "*/" "" .scheme.error
    hilight .hilight.java   18 "//\\s*[tT][oO][dD][oO]"           .scheme.error
    ; annotations
    hilight .hilight.java 4 "@" "\\}\\W" ""       .scheme.prepro
    ; constants: A_CONSTANT_VARAIBLE
    hilight .hilight.java 1    "[A-Z_]+"          .scheme.constant
    ; class names: AJavaClassName
    hilight .hilight.java 1    "[A-Z]+[a-z]+\\w*" .scheme.type
    ; Java keywords
    ; The following conventions are used:
    ; .scheme.type      primitive types
    ; .scheme.operator  flow control keywords
    ; .scheme.prepro    package declaration and imports
    ; .scheme.error     reserved keywords that have not been implemented
    ; .scheme.keyword   other java keywords that are not covered above
    hilight .hilight.java 1    "abstract"     .scheme.keyword
    hilight .hilight.java 1    "assert"       .scheme.keyword
    hilight .hilight.java 1    "boolean"      .scheme.type
    hilight .hilight.java 1    "break"        .scheme.operator
    hilight .hilight.java 1    "byte"         .scheme.type
    hilight .hilight.java 1    "case"         .scheme.operator
    hilight .hilight.java 1    "catch"        .scheme.operator
    hilight .hilight.java 1    "char"         .scheme.type
    hilight .hilight.java 1    "class"        .scheme.keyword
    hilight .hilight.java 1    "const"        .scheme.error  ; reserved but not implemented in java
    hilight .hilight.java 1    "continue"     .scheme.operator
    hilight .hilight.java 1    "default"      .scheme.operator
    hilight .hilight.java 1    "do"           .scheme.operator
    hilight .hilight.java 1    "double"       .scheme.type
    hilight .hilight.java 1    "else"         .scheme.operator
    hilight .hilight.java 1    "enum"         .scheme.keyword
    hilight .hilight.java 1    "extends"      .scheme.keyword
    hilight .hilight.java 1    "false"        .scheme.constant
    hilight .hilight.java 1    "final"        .scheme.keyword
    hilight .hilight.java 1    "finally"      .scheme.operator
    hilight .hilight.java 1    "float"        .scheme.type
    hilight .hilight.java 1    "for"          .scheme.operator
    hilight .hilight.java 1    "goto"         .scheme.error ; reserved but not implemented
    hilight .hilight.java 1    "if"           .scheme.operator
    hilight .hilight.java 1    "implements"   .scheme.keyword
    ;hilight .hilight.java 0x32 "import"       .scheme.prepro
    hilight .hilight.java 0x12 "^\\s*import"  .scheme.prepro
    hilight .hilight.java 1    "instanceof"   .scheme.keyword
    hilight .hilight.java 1    "int"          .scheme.type
    hilight .hilight.java 1    "interface"    .scheme.keyword
    hilight .hilight.java 1    "long"         .scheme.type
    hilight .hilight.java 1    "native"       .scheme.keyword
    hilight .hilight.java 1    "new"          .scheme.keyword
    hilight .hilight.java 1    "null"         .scheme.constant
    ; hilight .hilight.java 0x32 "package"      .scheme.prepro
    hilight .hilight.java 0x12 "^\\s*package" .scheme.prepro
    hilight .hilight.java 1    "private"      .scheme.keyword
    hilight .hilight.java 1    "protected"    .scheme.keyword
    hilight .hilight.java 1    "public"       .scheme.keyword
    hilight .hilight.java 1    "return"       .scheme.keyword
    hilight .hilight.java 1    "short"        .scheme.type
    hilight .hilight.java 1    "static"       .scheme.keyword
    hilight .hilight.java 1    "strictfp"     .scheme.keyword
    hilight .hilight.java 1    "super"        .scheme.keyword
    hilight .hilight.java 1    "switch"       .scheme.operator
    hilight .hilight.java 1    "synchronized" .scheme.keyword
    hilight .hilight.java 1    "this"         .scheme.keyword
    hilight .hilight.java 1    "throw"        .scheme.keyword
    hilight .hilight.java 1    "throws"       .scheme.keyword
    hilight .hilight.java 1    "transient"    .scheme.keyword
    hilight .hilight.java 1    "true"         .scheme.constant
    hilight .hilight.java 1    "try"          .scheme.operator
    hilight .hilight.java 1    "void"         .scheme.keyword
    hilight .hilight.java 1    "volatile"     .scheme.keyword
    hilight .hilight.java 1    "while "       .scheme.operator
    ; Hilight curly braces
    !if &sin "r" .fhook-java.setup
        hilight .hilight.java 1 "{"        .scheme.keyword
        hilight .hilight.java 1 "}"        .scheme.keyword
    !endif
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    ; Javadoc                                                               ;
    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
    !if &not &exi .hilight.javadoc
        set-variable .hilight.javadoc &pinc .hilight.next 1
        set-variable .hilight.pjavadoc &pinc .hilight.next 1
    !endif
    ; Add a hook into the normal Java hilighing. We jump into
    ; javadoc when we see an opening "/**" .
    hilight .hilight.java 0x80 "/\\*\\*" .hilight.javadoc .scheme.comment
    ; Javadoc hilighting starts here
    0 hilight .hilight.javadoc  2 50                      .scheme.comment
    ; &nbsp; etc.
    hilight .hilight.javadoc    0 "&\\w\\w;"              .scheme.variable
    hilight .hilight.javadoc    0 "&\\w\\w\\w;"           .scheme.variable
    hilight .hilight.javadoc    0 "&\\w\\w\\w\\w;"        .scheme.variable
    hilight .hilight.javadoc    0 "&\\w\\w\\w\\w\\w;"     .scheme.variable
    hilight .hilight.javadoc    0 "&\\w\\w\\w\\w\\w;"     .scheme.variable
    hilight .hilight.javadoc    0 "&\\w\\w\\w\\w\\w\\w;"  .scheme.variable
    ; "<pre> ... </pre>"
    hilight .hilight.javadoc    4 "<pre>" "</pre>" ""     .scheme.variable
    ; <anyWord>
    hilight .hilight.javadoc    4 "</?\\w+" ">" ""        .scheme.variable
    ; {@link URL}
    hilight .hilight.javadoc    4 "{@link" "}" ""         .scheme.link
    ; "@anyWord" - Use branch token and close when not a word!
    hilight .hilight.javadoc    4 "@" "\\}\\W" ""         .scheme.keyword
    ; We must return to Java when we see the close of comment "*/"
    hilight .hilight.javadoc 0x80 "\\*/" .hilight.java    .scheme.comment
    ;
    ; Special hilighting for a JavaDoc parameter - branch from the JavaDoc
    ; space into scheme for the parameter. Note that @param is defined after
    ; the generic '@' definitions.
    ; 
    ; Special for @param, @throws, @exception and @see 
    hilight .hilight.javadoc 0x80 "@param"     .hilight.pjavadoc .scheme.keyword
    hilight .hilight.javadoc 0x80 "@throws"    .hilight.pjavadoc .scheme.keyword
    hilight .hilight.javadoc 0x80 "@exception" .hilight.pjavadoc .scheme.keyword
    hilight .hilight.javadoc 0x80 "@see"       .hilight.pjavadoc .scheme.keyword
    ; JavaDoc parameter hilighting space.
    0 hilight .hilight.pjavadoc 2 50 .scheme.error
    ; Hilight the next word and finish.
    hilight .hilight.pjavadoc 0x80 "[#a-zA-Z][\\.#a-zA-Z0-9(),]*" .hilight.javadoc .scheme.prepro
    ; We must return to Java when we see the close of comment "*/"
    hilight .hilight.pjavadoc 0x80 "\\*/" .hilight.java .scheme.error
!endif
!if &sin "d" .fhook-java.setup
    ; Create the additional indentation rules.
    !if &not &exi .indent.java-comm
        set-variable .indent.java-comm &pinc .hilight.next 1
        set-variable .indent.javaT &pinc .hilight.next 1
    !endif
    ; create a simple indentation rule for javascript - real java files use
    ; the built in C indentation note: for the jsp lookback to work correctly
    set-variable .indent.java .hilight.java
    0 indent .indent.java 1 20
    indent .indent.java n "{"  t
    indent .indent.java o "}" -t
    indent .indent.java e "\"" "\"" "\\"
    indent .indent.java e "\'" "\'" "\\"
    indent .indent.java b "\\[" "]"
    indent .indent.java b "(" ")"
    indent .indent.java b "/\\*" "\\*/"
    indent .indent.java i "//"
    ; create main indent scheme as .indent.java + 1, the fhook-java sets the indent correctly
    set-variable #l5 &add .indent.java 1
    !if &sin "l" .fhook-java.setup
        ; Alternative java indentation scheme to handle more
        ; situations. We also define a "java comment" indentation scheme,
        ; this will help with comment content from intefering with the code
        ; indentation.
        ;
        ; Indentation Limitations:
        ;
        ; 1. Braceless conditionals are not handled. This is considered bad
        ;    style by many, so use braces. Change
        ;      if (true)
        ;          foo();
        ;    To
        ;      if (true) {
        ;          foo();
        ;      }
        ;
        ; 2. Continued lines are partially handled. Only lines that begin with
        ;    "." and basic math operators except * which inteferes with comments
        ;    are understood to be part of the previous line. For example:
        ;      int x = foo
        ;          .getThing()
        ;          .getX()
        ;          + 4;
        0 indent .indent.java-comm 1 20
        0 indent .indent.javaT 1 500
        0 indent #l5 2 20 .indent.javaT
        ; strings
        indent #l5 e "\"" "\"" "\\"
        indent #l5 e "\'" "\'" "\\"
        ; standard braces
        indent #l5 n "{"  t
        indent #l5 o "}" -t
        indent #l5 n "(" 3/2t
        indent #l5 o ")" -3/2t
        ; line continuation
        indent #l5 s "^\\s*[\\.\\+-/%][^\\*/]" t
        ; switch to comment indentation mode
        indent .indent.javaT t "/\\*"   .indent.java-comm
        indent #l5  x "/\\*" 1 .indent.java-comm
        indent .indent.java-comm x "\\*/" -1 0
        indent .indent.javaT t "\\*/" 0
        indent #l5 o "\\*/" -1
        ; ignore line comments
        indent #l5 i "//"
        ; ignore anotations that are on a line by themselves
        indent #l5 i "^\\s*@\\w+$"
        indent #l5 i "^\\s*@\\w+\\s*(.+)$"
        ; fix switch/case statements
        indent #l5 s "^\\s*case\\s[^:]+:" -t
        indent #l5 s "^\\s*default\\s*:" -t
        ; fix throws/implements/extends indent
        indent #l5 s "^\\s*throws\\s" t
        indent #l5 s "^\\s*implements\\s" t
        indent #l5 s "^\\s*extends\\s" t
    !else
        ; Use the 'C' indentation framework. Use this scheme when if/else
        ; statements are not braced.
        0 indent #l5 12
        indent #l5 "u" " * "
        ; Disable the bracket alignment 
        !if &not &sin "v" .fhook-java.setup
            indent #l5 "x" 10
        !endif
        ; Dummy out and reset un-used indents.
        0 indent .indent.java-comm 0 2
        0 indent .indent.javaT 0 2
            
    !endif
!endif
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Begin hook - entering the buffer - save the current fill-ignore characters
define-macro bhook-java
    !if &exi .fhook-java.fill-ignore
        set-variable .fhook-java.ofill-ignore $fill-ignore
        set-variable $fill-ignore .fhook-java.fill-ignore
    !endif
!emacro

; End hook - leaving the buffer - restore the fill-ignore characters
define-macro ehook-java
    !if &exi .fhook-java.fill-ignore
        set-variable $fill-ignore .fhook-java.ofill-ignore
    !endif
!emacro

; Fix up the $fill-mode so that we wrap java
; doc parameters. Do this by removing the "@"
; from the $fill-ignore variable.
!if &sin "@" $fill-ignore
    set-variable .fhook-java.fill-ignore $fill-ignore
    set-variable .fhook-java.fill-ignore &rep .fhook-java.fill-ignore "@" ""
!endif

!if &not &seq &which "javac" "ERROR"
  set-variable %fhook-java-lint "javac -Xlint \"%f\""
  set-variable %fhook-java-exec "javac \"%f\" && java -cp . "
  !if &not &seq &which "astyle" "ERROR"
    set-variable %fhook-java-format &spr "astyle --indent=spaces=%d \"%%f\"" $buffer-indent-width
  !endif
!endif

buffer-init-fhook "java"
