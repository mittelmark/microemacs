; -!- emf -!-
; This is part of the JASSPA MicroEmacs macro files
; Copyright (C) 2000-2009 JASSPA (www.jasspa.com)
; See the file me.emf for copying and conditions.
;
; Created:     Tue Sep 19 2000
; Synopsis:    Generic tags generator
; Authors:     Steven Phillips
;
; Notes:
;      Launchs ME with a tags generation macro file and %tag-option variable
;      setting to generate the tags file, typical command-line is:
;               me "@ntags" "-v%tag-option=mrcsev"
;      Also provides a GUI front end for setting the flags and starting path,
;      the gui can be disabled by passing an argument of -1.
;
!if &not &exi .osd.gtf
    set-variable .osd.gtf &pinc .osd.next 1
!endif

0 define-macro generate-tags-file-entry
    !if &gre @# 0
        set-variable $result &cond &equ @# 1 .generate-tags-file.flags &cond &equ @# 2 .generate-tags-file.path .generate-tags-file.tfile
    !elif &equ @# -1
        set-variable .generate-tags-file.flags @ml20 "" .generate-tags-file.flags
    !elif &equ @# -2
        set-variable .generate-tags-file.path @ml21 "" .generate-tags-file.path
    !else
        set-variable .generate-tags-file.tfile @ml24 "" .generate-tags-file.tfile
    !endif
!emacro

0 define-macro generate-tags-file-flags
    set-variable #l0 &lget "|a|e|m|p|r|s|v|" @#
    !if &sin #l0 .generate-tags-file.flags
        set-variable .generate-tags-file.flags &rep .generate-tags-file.flags #l0 ""
    !else
        set-variable .generate-tags-file.flags &cat .generate-tags-file.flags #l0
    !endif
!emacro

0 define-macro generate-tags-file-exec
    set-position "\x81"
    find-buffer "*generate-tags-file tmp*"
    set-variable $buffer-fname .generate-tags-file.path
    set-variable #l1 &spr "\"@%s\" -f \"-o%s\"" .generate-tags-file.type .generate-tags-file.flags
    !if &not &seq .generate-tags-file.tfile "tags"
        set-variable #l1 &spr "%s \"-t%s\"" #l1 .generate-tags-file.tfile
    !endif
    !force exec-me #l1 
    !force delete-buffer "*generate-tags-file tmp*"
    goto-position "\x81"
!emacro

-1 osd .osd.gtf
osd .osd.gtf 0   "batcDIHs" 10 3 46 0 -1 -1 250 40 .scheme.osd-title "Generate Tags File"
osd .osd.gtf 10  ""
osd .osd.gtf 20  "Sf"   "  \HBase Path:" 40
osd .osd.gtf 30  "hf"   "  "
osd .osd.gtf 40  "ExfH" .scheme.osd-entry "########################################" 2 generate-tags-file-entry
osd .osd.gtf 42  ""
osd .osd.gtf 45  "Sf"   "  \HTag File:" 50
osd .osd.gtf 47  "hf"   "  "
osd .osd.gtf 50  "ExfH" .scheme.osd-entry "########################################" 3 generate-tags-file-entry
osd .osd.gtf 55  ""
osd .osd.gtf 60  "Shf"  "  \HOptions:  " 70
osd .osd.gtf 70  "ExfH" .scheme.osd-entry "###############" 1 generate-tags-file-entry
osd .osd.gtf 80  "hf"   "    ("
osd .osd.gtf 90  "Rhfx" "\HAppend"       1 generate-tags-file-flags
osd .osd.gtf 100 "hf"   ", "
osd .osd.gtf 110 "Rhfx" "\HEnum-types"   2 generate-tags-file-flags
osd .osd.gtf 120 "hf"   ", "
osd .osd.gtf 130 "Rhfx" "\HMultiple"     3 generate-tags-file-flags
osd .osd.gtf 140 "hf"   ", "
osd .osd.gtf 150 "Rhfx" "\HPrototypes"   4 generate-tags-file-flags
osd .osd.gtf 160 "f"    ",  "
osd .osd.gtf 170 "hf"   "     "
osd .osd.gtf 180 "Rhfx" "\HRecurse"      5 generate-tags-file-flags
osd .osd.gtf 190 "hf"   ", "
osd .osd.gtf 200 "Rhfx" "\HStructure"    6 generate-tags-file-flags
osd .osd.gtf 210 "hf"   ", "
osd .osd.gtf 220 "Rhfx" "global \HVars"  7 generate-tags-file-flags
osd .osd.gtf 230 "f"    ")"
osd .osd.gtf 240 ""
osd .osd.gtf 250 "BhcfHi" .scheme.osd-ebtt " \HGenerate Tags "    f generate-tags-file-exec
osd .osd.gtf 260 "BcfH"   .scheme.osd-ebtt " \HCancel "    1 void
set-variable .generate-tags-file.flags &rep %tag-option "c" ""

; generate-tags-file [tagtype] [start-path]
; runs ME @<tagtype> -f -o<tags-options>...
define-macro generate-tags-file
    !if &exi &ind &spr ".%s.tags" $buffer-fhook
        set-variable .type &ind &spr ".%s.tags" $buffer-fhook
    !else
        !force set-variable .type @1
        !if &not $status
            set-variable .type @ml "tag command"
        !endif
    !endif
    !if &seq &lef .type 1 "!"
        ; direct shell command - run it
        0 ipipe-shell-command &rig .type 1 "*generate-tags*"
        !return
    !endif
    set-variable .tfile "tags"
    set-variable .path &lef $buffer-fname &rsin "/" $buffer-fname
    !force set-variable #l2 @2
    !if $status
        set-variable .path &stat "a" &cat .path #l2
    !endif
    !if &band @# 1
        ; if bit 1 is set then just do it
        generate-tags-file-exec
    !else
        .osd.gtf osd
    !endif
!emacro
