 "" "<FOLD+> \ecCText Insertion\ecA"
#i "#include <\p>\r\P" "  #include"
if "if(\p)\r{\r\r}\r\P" "  if()"
ef "else if(\p)\r{\r\r}\r\P" "  else if()"
el "else\r{\r\p\r}\r\P" "  else"
for "for (int i = 0; i < \p; i++) {\r\r}\r\P" "  for"
foreach "for (auto i : \p) {\r\r}\r\P" "  foreach"
sw "switch(\p)\r{\rcase :\rdefault:\r}\r\P" "  switch()"
wh "while(\p)\r{\r\r}\r\P" "  while()"
try "try {\r    // add code\r\p\r}\rcatch (const std::exception& err) {\r        std::cerr << err.what() << std::endl;\rexit(0);\r}\r\P" "  try"
 "" ""
 "" "</FOLD><FOLD+> \ecCApp Commands\ecA"
header "#include <iostream>\r#include <string>\r#include <vector>\r#include <map>\r" "  header" 
main "int main (int argc, char * argv[]) {\r    \p\r    return(0);\r}\r\P" "  main"
usage "void usage (char * appname) {\r    std::cout << \"Usage: \" << appname << \"[Options] [ARGUMENTS]\" << std::endl;\r}\r" "  usage"
 "" ""
 "" "</FOLD><FOLD+> \ecCRegex\ecA" 
rsea "std::regex_search(\pstring, pattern,flags)\P" "  rsea"
rmat "std::regex_match(\pstring, pattern,flags)\P" "  rmat"
rrep "std::regex_replace(\pstring, pattern,replace,flags)\P" "  rrep"
rgex "std::regex(\ppattern,flags)\P" "  rgex"
 "" ""
 "" "</FOLD><FOLD+> \ecCI/O Commands\ecA"
co "std::cout << \p << std::endl;\P" "  cout"
ce "std::cerr << \p << std::endl;\P" "  cerr"
fs "#include <filesystem>\rnamespace fs = std::filesystem;\r" "  filesystem"
whilef "std::ifstream infile;\rinfile.open(\pfilename.c_str());\rstd::string line=\"\";\rwhile(std::getline(infile,line)) {\r    std::cout << line << std::endl;\r}\rinfile.close();\r\P" "  whilef"
whilegz "// #include <zlib.h>\r\tgzFile file = gzopen(\p, \"rb\");\rif (!file) {\r    std::cerr << \"Error opening file\" << std::endl;\r    return 1;\r}\rchar buffer[1024];\rwhile (gzgets(file, buffer, sizeof(buffer))) {\r    std::string line(buffer);\r    // Process the line here\r    std::cout << line;\r}\rgzclose(file);\r\P" "  whilegz"

 "" ""
 "" "</FOLD><FOLD+> \ecCStructure Commands\ecA"
cl "class \p {\rpublic:\rName() {}; \rprivate:\rint x = 0;\r};\r\P" "  class"
ns "namespace \p {\r\r}\r\P" "  namespace"
tm "template <typename T>\r" "  template"
 "" ""
 "" "</FOLD><FOLD+> \ecCSTL/Pointers\ecA"
vec "std::vector<\p> v = {};" "  std::vector"
map "std::map<\p,> m = {};" "  std::map"
tup "std::tuple<\p, ,> t = {};" "  std::tuple"
mku "auto up = make_unique<\p>();\P" "  make_unique"
mks "auto sp = make_shared<\p>();\P" "  make_shared"
 "" ""
 "" "</FOLD><FOLD+> \ecCTesting\ecA"
dtest "#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN\r#include \"include/doctest.h\"\r\r" "  doctest"
tcase "TEST_CASE(\"\ptest section message\") {\r    CHECK(1 == 1);\r}\r\P" "  testcase"
 "" "</FOLD>"
