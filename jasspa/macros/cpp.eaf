 "" "<FOLD+> \ecCText Insertion\ecA"
in "#include <\p>\r\P" "  #\CCDin\CCAclude"
if "if(\p)\r{\r\r}\r\P" "  \CCDif\CCA"
ei "else if(\p)\r{\r\r}\r\P" "  \CCDe\CCAlse \CCDi\CCAf"
el "else\r{\r\p\r}\r\P" "  \CCDel\CCAse"
fo "for (int i = 0; i < \p; i++) {\r\r}\r\P" "  \CCDfo\CCAr"
fe "for (auto i : \p) {\r\r}\r\P" "  \CCDf\CCAore\CCDa\CCAch"
sw "switch(\p)\r{\rcase :\rdefault:\r}\r\P" "  \CCDsw\CCAitch"
wh "while(\p)\r{\r\r}\r\P" "  \CCDwh\CCAile"
tr "try {\r    // add code\r\p\r}\rcatch (const std::exception& err) {\r        std::cerr << err.what() << std::endl;\rexit(0);\r}\r\P" "  \CCDtr\CCAy"
 "" ""
 "" "</FOLD><FOLD+> \ecCApp Commands\ecA"
hd "#include <iostream>\r#include <string>\r#include <vector>\r#include <map>\r" "  \CCDh\CCAea\CCDd\CCAer" 
ma "int main (int argc, char * argv[]) {\r    \p\r    return(0);\r}\r\P" "  \CCDma\CCAin"
us "void usage (char * appname) {\r    std::cout << \"Usage: \" << appname << \"[Options] [ARGUMENTS]\" << std::endl;\r}\r" "  \CCDus\CCAage"
 "" ""
 "" "</FOLD><FOLD+> \ecCRegex\ecA" 
rsea "std::regex_search(\pstring, pattern,flags)\P" "  \CCDrsea\CCA"
rmat "std::regex_match(\pstring, pattern,flags)\P" "  \CCDrmat\CCA"
rrep "std::regex_replace(\pstring, pattern,replace,flags)\P" "  \CCDrrep\CCA"
rgex "std::regex(\ppattern,flags)\P" "  \CCDrgex\CCA"
 "" ""
 "" "</FOLD><FOLD+> \ecCI/O Commands\ecA"
co "std::cout << \p << std::endl;\P" "  \CCDco\CCAut"
ce "std::cerr << \p << std::endl;\P" "  \CCDce\CCArr"
fs "#include <filesystem>\rnamespace fs = std::filesystem;\r" "  \CCDf\CCAile\CCDs\CCAystem"
wf "std::ifstream infile;\rinfile.open(\pfilename.c_str());\rstd::string line=\"\";\rwhile(std::getline(infile,line)) {\r    std::cout << line << std::endl;\r}\rinfile.close();\r\P" "  \CCDw\CCAhile\CCDf\CCA"
whilegz "// #include <zlib.h>\r\tgzFile file = gzopen(\p, \"rb\");\rif (!file) {\r    std::cerr << \"Error opening file\" << std::endl;\r    return 1;\r}\rchar buffer[1024];\rwhile (gzgets(file, buffer, sizeof(buffer))) {\r    std::string line(buffer);\r    // Process the line here\r    std::cout << line;\r}\rgzclose(file);\r\P" "  \CCDwhilegz\CCA"

 "" ""
 "" "</FOLD><FOLD+> \ecCStructure Commands\ecA"
cl "class \p {\rpublic:\rName() {}; \rprivate:\rint x = 0;\r};\r\P" "  \CCDcl\CCAass"
ns "namespace \p {\r\r}\r\P" "  \CCDn\CCAame\CCDs\CCApace"
tm "template <typename T>\rT \p (T _) {\r\r}\r\P" "  \CCDt\CCAe\CCDm\CCAplate"
 "" ""
 "" "</FOLD><FOLD+> \ecCSTL/Pointers\ecA"
vec "std::vector<\p> v = {};" "  std::\CCDvec\CCAtor"
map "std::map<\p,> m = {};" "  std::\CCDmap\CCA"
tup "std::tuple<\p, ,> t = {};" "  std::\CCDtup\CCAle"
mku "auto up = make_unique<\p>();\P" "  \CCDm\CCAa\CCDk\CCAe_\CCDu\CCAnique"
mks "auto sp = make_shared<\p>();\P" "  \CCDm\CCAa\CCDk\CCAe_\CCDs\CCAhared"
 "" ""
 "" "</FOLD><FOLD+> \ecCTesting\ecA"
dtest "#define DOCTEST_CONFIG_IMPLEMENT_WITH_MAIN\r#include \"include/doctest.h\"\r\r" "  \CCDd\CCAoc\CCDtest\CCA"
tcase "TEST_CASE(\"\ptest section message\") {\r    CHECK(1 == 1);\r}\r\P" "  \CCDt\CCAest\CCDcase\CCA"
 "" "</FOLD>"
