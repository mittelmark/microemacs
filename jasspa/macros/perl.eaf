 "" "<FOLD+>\ecC Control Flow:\ecA"
if "if (\p) {\r\r}\P" "  if"
elsif "elsif (\p) {\r\r}\P" "  elsif"
ef "elsif (\p) {\r\r}\P"
else "else {\r\p\r}\P" "  else"
el "else {\r\p\r}\P"
while "while (\p) {\r\r}\P" "  while"
wh "while (\p) {\r\r}\P"
foreach "foreach (@\p) {\r\r}\P" "  foreach"
foreachoh "foreach my $okey (keys %\phash) {\rforeach my $ikey (keys %{$hash{$okey}}) {\rprint \"$hash{$okey}{$ikey} \"\r}\r}" "  foreach hoh"
for "for (my $x = 0 ; $x < \p ; $x++) {\r\r}\P" "  for"
pack "package \p;\r\P" "  package"
sub "sub \p{\r\r}\P" "  sub"
new "sub new {\rmy ($class) = shift;\rmy $self = {};\rbless $self, $class;\rreturn $self;\r}\r" "  new"
mth "sub \p {\rmy $self = shift;\r}\r\P" "  method"
 "" ""
 "" "</FOLD><FOLD+>\ecC File Handling:\ecA "
open "open (\pFILE, \"FILE\") or die \"Could not open file at $!\" ;\r\rclose (FILE);\P" "  open file"
whilef "while (<FILE>) {\r next if /^\\n/ ;\r \p\r }\P" "  while file"
openpipe "open (PIPE, \"ls -lt |\") or die \"Could not open pipe at $!\" ;\r    while (<PIPE>)  {\r        print ;\r    }\rclose PIPE;" "  open pipe"
 "" ""
 "" "</FOLD><FOLD+> \ecCTk:\ecA "
tk "use Tk ;\r\r our %gui ;\rsub gui_build {\r$gui{mw} = MainWindow->new;\r$gui{mw}->title(\"my title\");\r\r\p\rMainLoop;\r}\P" "  use Tk"
 "" "  <FOLD+> \ecCWidgets:\ecA "
tkadjl "use Tk::Adjuster;\r$gui{adj\p} = $gui{mw}->Adjuster(-side => 'left', => -widget => $gui{__widget__})->pack(-side => 'left', -fill => 'y', -expand => 0);\P" "    Adjuster Left"
tkadjt "use Tk::Adjuster;\r$gui{adj\p} = $gui{mw}->Adjuster(-side => 'top', => -widget => $gui{__widget__})->pack(-side => 'top', -fill => 'x', -expand => 0);\P" "    Adjuster Top"
tkball "use Tk::Balloon;\r$gui{balloon\p} = $gui{mw}->Balloon(-balloonposition => 'mouse' );\r$gui{balloon}->attach($__widget__, -balloonmsg => \\$balloonmessage);\P"  "    Balloon"
tkbtn "$gui{btn_\p} = $gui{parent}->Button(-text => '', -command => \\&cmd, -underline => 0)->pack(-side => 'top');\P" "    Button"
tkbe "use Tk::BrowseEntry;\r$gui{be} = $gui{\pparent}->BrowseEntry(-label => \"Label\", -variable => \\$var);\r    $gui{be}->insert(\"end\", \"opt1\");\r $gui{be}->insert(\"end\", \"opt2\")->pack(-side => 'top', -fill => 'x', -expand => 0);\r\P"  "    BrowseEntry"
tkcol "use Tk::Columns;\r   $gui{col} = $gui{\pparent}->Columns(\r'-columnlabels' => [qw (column1 column2)],\r '-listbackground' => 'white',\r'-listforeground' => 'black',\r'-buttonforeground' => 'black',\r'-buttonbackground' => 'blue',\r)->pack(-side => 'top', -expand => 1, -fill => 'both');;" "    Columns (Tk-DKW-0.03)"
tkcvs "$gui{cvs_\p} = $gui{parent}->Canvas()->pack(-side => 'left', -fill => 'both', expand => 1);\P" "    Canvas"
tkcb "$gui{cb_} = $gui{parent}->Checkbutton(-text => '', -command => \\&cmd, -variable => \\$var)->pack(-side => 'top');\P" "    Checkbutton"
tkdia "use Tk::Dialog;\r$gui{dia} = $gui{mw}->Dialog(-title => 'title', -text => 'text', -bitmap => 'question', -default_button => 'Yes', -buttons => [qw/Yes No/])->Show;\rif ($gui{dia} eq 'Yes') {\r}\r\P" "    Dialog"
tkdiabox "use Tk::DialogBox;\r$gui{dia_box} = $gui{mw}->DialogBox(-title => 'title', -text => 'text', -bitmap => 'question', -default_button => 'Yes', -buttons => [qw/Yes No/]);\r$gui{dia_box}->add($widget, args);\r my $answer = $gui{dia_box}->Show;\r" "    DialogBox"
tkent "$gui{ent\p} = $gui{parent}->Entry(-textvariable =>\\$var)->pack(-side => 'top', -fill => 'x', -expand => 0 );\P" "    Entry"
tkentint "$gui{ent_int\p} = $gui{parent}->Entry(-textvariable => \\$var, -validate => 'key', -validatecommand => sub { if ($_[0] =~ m/^\\d*$/) { return 1 ;}})->pack(-side => 'top', -fill => 'x', -expand => 0 );\P" "    EntryInteger"
tkdt "use Tk::DirTree;\r$gui{dt} = $gui{\pparent}->DirTree(-command => \\&cmd)->pack(-side => 'top', -fill => 'both', -expand => 1);\P" "    DirTree"
tkfr "$gui{fr} = $gui{\pparent}->Frame->pack(-side => 'left', -fill => 'both', -expand => 1);\P" "    Frame"
tkgof "my $dir = \p ; \rmy $types = [\r     ['Text Files',       ['.txt', '.text']],\r     ['TCL Scripts',      '.tcl'           ],\r     ['All Files',        '*',             ],\r ]; my $filename = $widget->getOpenFile(-filetypes=>$types, -initialdir=>$dir);\r if ($filename ne \"\") {\r     # Open the file ...\r }\P"  "    getOpenFile"
tkgsf "my $dir = \p ; \rmy $types = [\r     ['Text Files',       ['.txt', '.text']],\r     ['TCL Scripts',      '.tcl'           ],\r     ['All Files',        '*',             ],\r ]; my $filename = $widget->getSaveFile(-filetypes=>$types, -initialdir=>$dir, -initialfile => $file);\r if ($filename ne \"\") {\r     # Save the file ...\r }\P"  "    getSaveFile"
tkhl "use Tk::Hlist ;\r$gui{hl} = $gui{\pparent}->Hlist(-itemtype   => 'text', -separator  => '/', -selectmode => 'single', \r-browsecmd  => sub {;})->pack(\r-side => 'top', -fill => 'both', -expand => 1);\P" "    Hlist"
tlle "use Tk::LabEntry;\r$gui{le} = $gui{\pparent}->LabEntry(-label => \"Search:\", -textvariable => \\$test)->pack(-side => 'top', -fill => 'x', -expand => 0);\P" "    LabEntry"
tllf "use Tk::LabFrame;\r$gui{lf} = $gui{\pparent}->LabFrame(-label => \"text:\", -labelside => \"acrosstop\");->pack(-side => 'top', -fill => 'x', -expand => 0);\P" "    LabFrame"
tkla "$gui{label} = $gui{\pparent}->Label(-text => 'text', -textvariable => \\$var{var})->pack;\P" "    Label"
tklb "$gui{lb} = $gui{\pparent}->Scrolled('Listbox', -scrollbars => 'se', -selectmode => 'single|multiple|extended')->pack(-side => 'top', -fill => 'x', -expand => 0);\P" "    Listbox"
tkmb "$gui{mw}->messageBox(-message => \"a message!\", -icon => 'info', -title  => 'Info!');" "    messagebox"
tknb "use Tk::NoteBook;\r$gui{nb} = $gui{\pparent}->NoteBook()->pack(-side => 'top', -fill => 'both', -expand => 1);\r $gui{nb_page1} = $gui{nb}w->add(\"page1\", __options__);\r\P" "    NoteBook"
tkopt "$gui{opt} =  $gui{\pparent}->Optionmenu(options => \@array, -command => sub {;}, -variable => \\$var)->pack;\P" "    Optionmenu"
tkpr "use Tk::ProgressBar;\r$gui{progr} = $gui{\pparent}->ProgressBar(-width => 200, -length => 20,\r -anchor => 's', -from => 0, -to => 100, -blocks => 10, -colors => [0, 'green', 50, 'yellow' , 80, 'red'],\r -variable => \\$percent_done );\r $gui{progr}->value($position);\P" "    ProgressBar"
tkro " use Tk::ROText;\r$gui{rotext} = $gui{parent}->Scrolled('ROText', -scrollbars => 'se')->pack(-side => 'top', -fill => 'both', -expand => 1);\P" "    ROText"
tkrb "$gui{rb} = $gui{\pparent}->Radiobutton(-text => 'text', -variable => \\$var)->pack;\P" "    Radiobutton"
tkscale "$gui{scale} = $gui{\pparent}->Scale(-from => 0, -to => 100, -orient  => 'vertical|horizontal', -label => 'text', -command => sub { })->pack(-side => 'left', -fill => y, -expand => 0);\P" "    Scale"
tkscrolled "$gui{\p} = $gui{mw}->Scrolled('text', -scrollbars => 'se', -options ...)->pack(-side => 'left', -expand => 1, -fill => 'both');\P"    "    Scrolled"
tksbr    "$gui{sb} = $gui{\pparent}->Scrollbar(-command => ['yview', $widget])->pack(-side => 'left', -fill => 'y');\P" "    Scrollbar right"
tksbb    "$gui{sb} = $gui{\pparent}->Scrollbar(-command => ['xview', $widget])->pack(-side => 'bottom', -fill => 'x');\P" "    Scrollbar bottom"
tktlist  "use Tk::TList;\r$gui{tl} = $gui{\pparent}->TList(-orient => 'vertical')->pack(-side => 'left', -fill => 'both', -expand => 1);" "    TList"
tktext " $gui{text} = $gui{parent}->Scrolled('Text', -scrollbars => 'se')->pack(-side => 'top', -fill => 'both', -expand => 1);\P" "    ROText"
 "" ""
 "" "  </FOLD><FOLD+> \ecCOptions:\ecA "
-o "-\p => '',\P" "    -option"
-c "-command => sub { \p ;} \P"   "    -command"
-f "-font => 'Helvetica 12 bold'" "    -font"
 "" ""
 "" "  </FOLD><FOLD+> \ecCMenues:\ecA "
mnu "$gui{mnu} = $gui{mw}->Frame(-relief => 'raised', -border => 2)->pack(-side => 'top', -expand => 0, -fill => 'x');\r" "    Menu Main"
mnfile "$gui{mnu_file} = $gui{mnu}->Menubutton(-text => 'File', underline => 0)->pack(-side => 'left');\r" "    Menu File"
mnedit "$gui{mmu_edit} = $gui{mnu}->Menubutton(-text => 'Edit', underline => 0)->pack(-side => 'left');\r" "    Menu Edit"
mnexit "$gui{mnu_file}->command(-label => 'E~xit', -command => sub { exit(0); } ) ;\r" "    Menu Exit"
mncom "$gui{mnu_\p}->command(-label => '', -underline => 0, -command => sub { } ) ;\P" "    Command"
mnsep "$gui{mnu_\p}\p->separator();\P" "    Separator"
 "" "</FOLD>"
 "" "</FOLD><FOLD+>\ecC Perl Builtins:\ecA "
split "split (/\\s+/, \p);\P" "  split"
join "join(\"\p\", @a);\r\P" "  join"
grep  "grep(/\p/, @list)\P" "  grep"
 "" ""
 "" "</FOLD><FOLD+>\ecC Date::Format:\ecA"
useDate "use Date::Format ;\r" "  use Date::Format" 
localtime "my ($sec, $min, $hour, $mday, $mon, $year, $wday, $yday)  = localtime ;\r $year += 1900 ; $mon++ ; $yday++ ;\r" "  localtime"
timepr "print STDERR \"\\n\\nStarting/Ending Programs\p at: \" . time2str(\"%Y-%m-%d %R\" , time) .\"\\n\" x 2 ;\r\P" "  print time"
 "" ""
 "" "</FOLD><FOLD+>\ecC DBI:\ecA "
useDBI "use DBI;\r our ($sth, $dbh, $rc, $rv);\r" "  use DBI"
dbisqlite "$dbh = DBI->connect(\"dbi:SQLite:dbname=$\p\",'','') \r   or die \"Cannot connect: \" . $DBI::errstr;\r\r$rc  = $dbh->disconnect;" "  connect sqlite"
dbisel "$sth = $dbh->prepare(\"SELECT * FROM \p\") \r   or die 'Cannot prepare: ' . $dbh->errstr();\r$sth->execute() or die 'Cannot execute: ' . $sth->errstr();\r\p\r$sth->finish();" "  select"
dbiins "$sth = $dbh->prepare(\"INSERT INTO \p (col1,col2) VALUES (?,?)\") \r   or die 'Cannot prepare: ' . $dbh->errstr();\r$sth->execute($val1, $val2) or die 'Cannot execute: ' . $sth->errstr();\r\p\r$sth->finish();" "  insert"
dbicre "$sth = $dbh->prepare(\"CREATE TABLE \p ()\")\r    or die 'Cannot prepare: ' . $dbh->errstr();\r    $sth->execute() or die 'Cannot execute: ' . $sth->errstr();\r    $sth->finish();" "  create table"
dbifetcharr "while ( my @row = $sth->fetchrow_array ) {\r  print \"@row\\n\";\r}" "  fetchrow_array"
dbifetchhref "while (my $\phash_ref = $dbh->fetchrow_hashref($statement))\r print \"$ary_ref->{col}\\n\";\r}" "  fetchrow_hashref"
 "" ""
 "" "</FOLD><FOLD+>\ecC Tie:\ecA "
tieH "use  DB_File\rour (%db, $DB_HASH);\rmy $filename = \"\pfilenametext\" ;\r    unlink $filename ;\rtie %db, 'DB_File', $filename;\r$DB_HASH->{'cachesize'} = 10000 ;\runtie %db;\r\P" "  DB_File Hash"
tieA "use DB_File ;\r    my $filename = \"\pfilenametext\" ;\r    unlink $filename ;\r    our(@db, $DB_RECNO) ;\r    tie @db, \"DB_File\", $filename, O_RDWR|O_CREAT, 0666, $DB_RECNO\r  or die \"Cannot open file $filename: $!\n\" ;\runtie @db;\r\P" "  DB_File Array"
 "" "</FOLD>"
