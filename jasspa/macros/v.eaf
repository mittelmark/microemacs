 "" "<FOLD+> \ecCProgram Flow:\ecA"
for "for i,\p in vals {\r\r}\r\P" "  for"
fori "for i = 0; i < \p; i++ {\r\r}\r\P "fori"
form "for key,val in map {\r\r}\r\P" "  form"
forr "for i in 0 .. \p {\r\r}\r\P" "  forr"
while "mut i := 0\rfor i < \p {\ri++\r}\r\P" "  while"
if "if \p {\r\r}\P" "  if"
elif "else if \p {\r\r}\P"  "  elif"
else "else {\r\p\r}\r\P" "  else"
match "match \p {\r'val1' { }\r'val2' { }\relse { }\r}\r\P" "  match"
fn "pub fn \p () {\r\r}\r\P" "  fn"
mut "mut \p := \P" "  mut"
str "pub struct \p {\r\r}\" "  struct"
enum "enum \P {\re1\re2\r}\r\P" "  enum"
arr "mut \p := [ ]\P" "  array"
mat "mut \p := [][]
map "mut \p := map[string]int{} // string keys, int values" "  map"
meth "fn \pType.meth() ret) {\r\r}\r\P" "  meth"
type "type \p struct {\r\r}\r\P" "  type"
main "fn main () {\r\p\r}\r\P" "  main"
print "println(\p)\P" "  print"
inp " mut \p := os.input('Enter: ')\P"  "  input"
openr "lines := os.read_lines(\pfilePath) or {\r println('Failed to read file')\r}\r\P" "  openr"
openw "mut file := os.create(\pfilePath) or {\rprintln('Failed to create file')\rreturn\r}\rfile.write_string('Hello, V!\n') or {\rprintln('Failed to write to file')\r}\rfile.close()\r\P" "  openw"
 "" ""
